{
  "message": "TypeError: unsupported operand type(s) for +: 'int' and 'list'",
  "traceback": ["py_call_impl(callable, dots$args, dots$keywords)", "object$add(layer)", "compose_layer.keras.engine.sequential.Sequential(object, layer)", "compose_layer(object, layer)", "create_layer(keras$layers$Dense, object, list(units = as.integer(units), \n    activation = activation, use_bias = use_bias, kernel_initializer = kernel_initializer, \n    bias_initializer = bias_initializer, kernel_regularizer = kernel_regularizer, \n    bias_regularizer = bias_regularizer, activity_regularizer = activity_regularizer, \n    kernel_constraint = kernel_constraint, bias_constraint = bias_constraint, \n    input_shape = normalize_shape(input_shape), batch_input_shape = normalize_shape(batch_input_shape), \n    batch_size = as_nullable_integer(batch_size), dtype = dtype, \n    name = name, trainable = trainable, weights = weights))", "layer_dense(., units = FLAGS$dense_units1, activation = \"relu\", \n    input_shape = c(784))", "function_list[[i]](value)", "freduce(value, `_function_list`)", "`_fseq`(`_lhs`)", "eval(quote(`_fseq`(`_lhs`)), env, env)", "eval(quote(`_fseq`(`_lhs`)), env, env)", "withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))", "model %>% layer_dense(units = FLAGS$dense_units1, activation = \"relu\", \n    input_shape = c(784)) %>% layer_dropout(rate = FLAGS$dropout1) %>% \n    layer_dense(units = 128, activation = \"relu\") %>% layer_dropout(rate = FLAGS$dropout2) %>% \n    layer_dense(units = 10, activation = \"softmax\")", "eval(ei, envir)", "eval(ei, envir)", "training_run(\"mnist_mlp_FLAGS.R\", flags = \"flags.yml\", config = \"alt\")"]
}
